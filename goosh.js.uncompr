var goosh = new Object();
goosh.lib = new Object();


// thanks to Michael Schwarz for this function
goosh.lib.namespace = function (ns)
{
  var parts = ns.split(".");
  var root = window;

  for(var i=0; i<parts.length; i++)
  {
    if(typeof root[parts[i]] == "undefined")
      root[parts[i]] = new Object();

    root = root[parts[i]];
  }
}



goosh.lib.in_array = function (arr,elem) {
  var i;
  for (i = 0; i < arr.length; i++) {
    if (arr[i] == elem) {
      return true;
    }
  }
  return false;
};

goosh.lib.chop = function(text){

if(text)
 while(text.charAt(0) == " ") text = text.substr(1);

return text;
}
goosh.lib.namespace("goosh.lib");

goosh.lib.get = function(name){
  name = name.replace(/[\[]/,"\\\[").replace(/[\]]/,"\\\]");
  var regexS = "[\\?&]"+name+"=([^&#]*)";
  var regex = new RegExp( regexS );
  var results = regex.exec( window.location.href );
  if( results == null )
    return "";
  else
    return decodeURIComponent(results[1]).replace(/\+/g," ");
}
goosh.lib.namespace("goosh.lib.cookie");

goosh.lib.cookie.list = new Object();

/*
goosh.lib.cookie.fetch = function(context,result){

  goosh.lib.cookie.getfromstr(document.cookie);

  if(goosh.config.user != "guest") {
    if(!context) {
      goosh.ajax.query("http://goosh.appspot.com/cookie?callback=goosh.lib.cookie.fetch");
    }
    else if(goosh.ajax.iscontext(context)){
    
     //alert(result);

     goosh.lib.cookie.getfromstr(result,true);

    }
  
  }  
  return goosh.lib.cookie.list;
}
*/

goosh.lib.cookie.getfromstr = function(str,update){
  var ca = str.split(';');

  for(var i=0;i < ca.length;i++) {
     var pair = ca[i].split("=");
     var key = goosh.lib.chop(pair[0]);
     var val = goosh.lib.chop(pair[1]);
     if(update && goosh.lib.cookie.list[key] != val){
	goosh.lib.cookie.set(key,val,365);
     }
     goosh.lib.cookie.list[key] = val;
  }
}


goosh.lib.cookie.get = function(name) {
  return goosh.lib.cookie.list[name];
}



goosh.lib.cookie.set = function(name,val,days) {

  var duration = new Date();
  var timespan = duration.getTime() + (days * 24 * 60 * 60 * 1000);
  duration.setTime(timespan);

  document.cookie = name+"="+val+"; expires=" + duration.toGMTString();

  if(goosh.config.user != "guest" && name != "loggedin") {
      var del = "";
      if(days<0) {del= "&del=1"; }
      goosh.ajax.query("http://goosh.appspot.com/cookie?key="+encodeURIComponent(name)+"&val="+encodeURIComponent(val)+"&callback=goosh.lib.cookie.fetch"+del,true);
  }

  goosh.lib.cookie.list[name] = val;
  return val;
}


goosh.lib.cookie.del = function(name) {

  goosh.lib.cookie.set(name,"",-100);

  goosh.lib.cookie.list[name] = null;

}


goosh.lib.cookie.getall = function(){
  return goosh.lib.cookie.list;
}
goosh.lib.namespace("goosh.lang");

goosh.lang.list = {
  'arabic' : 'ar',
  'bulgarian' : 'bg',
  'catalan' : 'ca',
  'chinese' : 'zh',
  'chinese_simplified' : 'zh-cn',
  'chinese_traditional' : 'zh-tw',
  'croatian' : 'hr',
  'czech' : 'cs',
  'danish' : 'da',
  'dutch': 'nl',
  'english' : 'en',
  'estonian' : 'et',
  'filipino' : 'tl',
  'finnish' : 'fi',
  'french' : 'fr',
  'german' : 'de',
  'greek' : 'el',
  'hebrew' : 'iw',
  'hindi' : 'hi',
  'hungarian' : 'hu',
  'indonesian' : 'id',
  'italian' : 'it',
  'japanese' : 'ja',
  'korean' : 'ko',
  'latvian' : 'lv',
  'lithuanian' : 'lt',
  'norwegian' : 'no',
  'persian' : 'fa',
  'polish' : 'pl',
  'portuguese' : 'pt',
  'romanian' : 'ro',
  'russian' : 'ru',
  'serbian' : 'sr',
  'slovak' : 'sk',
  'slovenian' : 'sl',
  'spanish' : 'es',
  'swedish' : 'sv',
  'thai' : 'th',
  'turkish' : 'tr',
  'ukrainian' : 'uk',
  'vietnamese' : 'vi'
};

goosh.lang.reverse = new Object();
for(key in goosh.lang.list) goosh.lang.reverse[goosh.lang.list[key]] =key;
goosh.lib.namespace("goosh.gui");


goosh.gui.inputel = false;
goosh.gui.outputel = false;
goosh.gui.promptel = false;

goosh.gui.inputfield = false;
goosh.gui.bodyel = false;
goosh.gui.headel = false;

goosh.gui.el = function(id){
 return document.getElementById(id);
}


goosh.gui.init = function(){

  goosh.gui.inputel = document.getElementById('input');
  goosh.gui.outputel = document.getElementById('output');
  goosh.gui.promptel = document.getElementById('prompt');
  goosh.gui.inputfield = document.getElementById('inputfield');
  goosh.gui.bodyel = document.getElementById('body');
  goosh.gui.headel = document.getElementById('head');


  if(goosh.gui.inputfield.createTextRange) {
     goosh.gui.inputfield.onkeyup= new Function("return goosh.keyboard.mcursor(event);");
     goosh.gui.bodyel.onfocus =    new Function("return goosh.gui.focusinput(event);");
     goosh.gui.bodyel.onclick =    new Function("return goosh.gui.focusinput(event);");
     goosh.gui.bodyel.onkeydown =  new Function("return goosh.keyboard.keyDownHandler(event);");
  } else {
     goosh.gui.inputfield.onkeyup= goosh.keyboard.mcursor;
     goosh.gui.bodyel.onfocus = goosh.gui.focusinput;
     goosh.gui.bodyel.onclick = goosh.gui.focusinput;
     goosh.gui.bodyel.onkeydown = goosh.keyboard.keyDownHandler;
  }

}


// input / output functions

goosh.gui.error = function(text){
  goosh.ajax.stopall();

  goosh.gui.out("Error: "+text+"<br/> <br/>");
  goosh.gui.showinput();
  goosh.gui.focusinput();
  goosh.gui.scroll();
}



goosh.gui.outln = function(text){
  goosh.gui.out(text+"<br/>");
}

goosh.gui.out = function(text){
  //goosh.gui.outputel.innerHTML += text;  
  var div = document.createElement("div");
  div.innerHTML = text;
  goosh.gui.outputel.appendChild(div); 
  return div;
}

goosh.gui.css = function(file){
  //goosh.gui.outputel.innerHTML += text;  
  var style = document.createElement("link");
  style.href = file;
  style.rel= "stylesheet";
  style.type = "text/css";
  goosh.gui.bodyel.appendChild(style); 
  return style;
}


goosh.gui.less = function(text){
  return "<span class='less'>"+text+"</span>";
}

goosh.gui.info = function(text){
  return "<span class='info'>"+text+"</span>";
}

goosh.gui.clear = function(){
  goosh.gui.outputel.innerHTML = "";
}

goosh.gui.showinput = function(){
  goosh.gui.inputel.style['display'] = 'block';
}

goosh.gui.hideinput = function(){
  goosh.gui.inputel.style['display'] = 'none';
}

goosh.gui.focusinput = function(){
  var txt = "";
  //if (document.getSelection) txt = document.getSelection();
  if (document.selection) txt = document.selection.createRange().text;
  else if (window.getSelection) txt = window.getSelection().toString();

  if(txt.length == 0){

    document.f.q.value = document.f.q.value; // for safari
    if(goosh.gui.inputel.style['display'] != 'none') document.f.q.focus();
  }
}

goosh.gui.updateprompt = function(){
  goosh.gui.prompt = goosh.config.user+"@"+goosh.config.host+":/"+goosh.config.mode+goosh.config.pend;
  goosh.gui.promptel.innerHTML = goosh.gui.prompt;
}

goosh.gui.scroll = function(){
  window.scrollBy(0, 122500);
}

goosh.gui.setstyle = function(ele,prop,val){
try{
  var el = goosh.gui.el(ele);
  el.style[prop] = val;
  return true;
}
catch(e){
return false;
}

}

goosh.gui.setstyleclass = function(classname,style){
  //goosh.gui.outputel.innerHTML += text;  
  var div = document.createElement("div");
  var out = "<br style='line-height:0px;'/><style>"+classname+" {"+style+"}</style>";
  div.innerHTML = out;
  goosh.gui.bodyel.appendChild(div);

}


goosh.lib.namespace("goosh.set");

goosh.set.base = function(name,def,txt,min,max){
 this.name = name;
 this.txt = txt;
 this.def = def;
 (max) ? this.max = max : this.max = 2000;
 (min) ? this.min = min : this.min = 0;

 if(min && max) this.txt += " ("+min+".."+max+")";

 this.get = function() { return eval (""+this.name+";"); };
 this.set = function(val) { eval (""+this.name+" = '"+val+"';"); return true; };
 
}

goosh.set.list = new Object();
goosh.set.list['lang'] = new goosh.set.base("goosh.config.lang","en","google default language");
goosh.set.list['lang'].set = function(val) { 
  if (goosh.lang.reverse[val])  goosh.config.lang = val;
  else if (goosh.lang.list[val]) goosh.config.lang = goosh.lang.list[val];
  else return false;
  return true;
};

goosh.set.list['results'] = new goosh.set.base("goosh.config.numres","4","number of results for google-searches",1,100);
goosh.set.list['timeout'] = new goosh.set.base("goosh.config.timeout","4","timeout for ajax requests in seconds",1,100);

goosh.set.list['style.bg'] = new goosh.set.base("goosh.config.bgcolor","#FFFFFF","goosh background color");
goosh.set.list['style.bg'].set = function(val){
  if( goosh.gui.setstyle("body","backgroundColor",val) &&
      goosh.gui.setstyle("inputfield","backgroundColor",val)){
  goosh.config.bgcolor = val;
  return true;
  }
  else return false;
}

goosh.set.list['style.fg'] = new goosh.set.base("goosh.config.fgcolor","#000000","goosh font color");
goosh.set.list['style.fg'].set = function(val){
  if( goosh.gui.setstyle("body","color",val) &&
      goosh.gui.setstyle("inputfield","color",val)){
  goosh.config.fgcolor = val;
  return true;
  }
  else return false;
}

goosh.set.list['style.hl'] = new goosh.set.base("goosh.config.hlcolor","#009900","goosh highlight color");
goosh.set.list['style.hl'].set = function(val){
  goosh.gui.setstyleclass(".info","color: "+val);
  goosh.gui.setstyleclass("a:visited.info","color: "+val);
  goosh.config.hlcolor = val;
  return true;
}

goosh.set.list['style.sh'] = new goosh.set.base("goosh.config.shcolor","#666666","goosh 'shaded' color");
goosh.set.list['style.sh'].set = function(val){
  goosh.gui.setstyleclass(".less","color: "+val);
  goosh.config.shcolor = val;
  return true;
}


goosh.set.list['style.link'] = new goosh.set.base("goosh.config.linkcolor","#0000CC","goosh link color");
goosh.set.list['style.link'].set = function(val){
  goosh.gui.setstyleclass("a","color: "+val);
  goosh.config.linkcolor = val;
  return true;
}


goosh.set.list['style.vlink'] = new goosh.set.base("goosh.config.vlinkcolor","#551a8b","goosh visited link color");
goosh.set.list['style.vlink'].set = function(val){
  goosh.gui.setstyleclass("a:visited","color: "+val);
  goosh.config.vlinkcolor = val;
  return true;
}

goosh.set.list['theme'] = new goosh.set.base("goosh.config.theme","","ace theme");
goosh.set.list['theme'].set = function(val){
//  goosh.gui.setstyleclass("a:visited","color: "+val);
  goosh.gui.css('/css/'+val+'.css');
  goosh.config.theme = val;
  return true;
}



// #551a8b

//goosh.gui.setstyleclass



goosh.set.list['place.width'] = new goosh.set.base("goosh.config.mapwidth","300","width of map image",20,600);
goosh.set.list['place.height'] = new goosh.set.base("goosh.config.mapheight","150","height of map image",20,500);

goosh.set.list['amazon.reflink'] = new goosh.set.base("goosh.config.reflink","on","Add referer links to amazon product links");

goosh.set.init = function(context,result){

 if(goosh.config.user != "guest") {
    if(!context) {
      goosh.ajax.query("http://goosh.appspot.com/cookie?callback=goosh.set.init");
      return;
    }
    else if(goosh.ajax.iscontext(context)){

     goosh.gui.outln("Loading remote settings...");
     //alert(result);
     goosh.lib.cookie.getfromstr(document.cookie);
     goosh.lib.cookie.getfromstr(result,true);

    }

  }
  else {
   goosh.gui.outln("Loading local settings...");
   goosh.lib.cookie.getfromstr(document.cookie);
  }

  var cookies = goosh.lib.cookie.getall();

  for(key in goosh.set.list){
    var c = false;
    if(cookies[key]) c = cookies[key];
    if(c && goosh.set.list[key].set(c)) {
	goosh.gui.outln("&nbsp;"+key+" => &quot;"+c+"&quot;."); 
	}
    else{
       goosh.set.list[key].set(goosh.set.list[key].def);
//	goosh.gui.outln(key+" = &quot;"+goosh.set.list[key].get()+"&quot;."); 
    }
  }

     goosh.gui.outln("");
  //   goosh.gui.updateprompt();
   //  goosh.gui.showinput();
   //  goosh.gui.focusinput();
    goosh.getquery();

}


goosh.lib.namespace("goosh.ajax");

goosh.ajax.contexts = new Array();
goosh.ajax.lastcontext = false;

goosh.ajax.stopall = function(){

 for(key in goosh.ajax.contexts){
   goosh.ajax.iscontext(key);
 }

}

goosh.ajax.deletecontext = function(context){
  goosh.gui.outln('Error: Operation timed out. '+context);
  if(!document.all) goosh.gui.outln(goosh.gui.less('If you use the noscript firefox-extension, add "ajax.googleapis.com" to the whitelist.'));
  goosh.gui.outln('');
  goosh.ajax.contexts[context]=false;

  var d = document.getElementById(context);
  if(d) document.body.removeChild(d);

  goosh.gui.showinput();
  goosh.gui.focusinput();
  goosh.gui.scroll();
  if(!document.all) stop();

}

goosh.ajax.iscontext = function(name){

 if(goosh.ajax.contexts[name]){
 
   clearTimeout(goosh.ajax.contexts[name]);
   goosh.ajax.contexts[name] =false;

  var d = document.getElementById(name);
  if(d) document.body.removeChild(d);


 return true;
 }
 else return false;

}

goosh.ajax.getcontext = function(name){
  var d = new Date(); 
  var context = d.getTime();
  if(name) context = name;

  goosh.ajax.contexts[context] = setTimeout("goosh.ajax.deletecontext('"+context+"');",1000*goosh.config.timeout);

  return context;
}

goosh.ajax.query = function(url,nohide){
    var context = "none";
    if(!nohide){ 
    context = goosh.ajax.getcontext();
    goosh.ajax.lastcontext = context; // more elegant with return, but doesnt work in opera
    goosh.gui.hideinput();
    }


    var script = document.createElement("script");
    document.body.appendChild(script);
    script.src = url+'&context='+context+'&';
    script.id = context;

}



goosh.lib.namespace("goosh.config");

goosh.config.apikey = "ABQIAAAA0cXSEVCNSwf_x74KTtPJMRShYK5vgJfK0afUKMRqjECszDItkhTOIyZ74499O_ys5nJIQuP4sq4nZg";

goosh.config.user = "guest";
goosh.config.host = "goosh.org";
goosh.config.mode = "web";
goosh.config.pend = ">&nbsp;";

goosh.config.numres = 4;
goosh.config.timeout = 4;

goosh.config.start=0;
goosh.config.moreobj;

goosh.config.lang = "en";
goosh.config.urls = new Array();
goosh.config.cmdlines = new Array();
goosh.config.cmdqueue = new Array();

goosh.config.reflink = "on";
goosh.lib.namespace("goosh.keyboard");

goosh.keyboard.suggestions = new Array();
goosh.keyboard.suggpos = 1;
goosh.keyboard.suggword ="";

goosh.keyboard.hist = new Array();
goosh.keyboard.histpos = 0;
goosh.keyboard.histtemp = 0;


goosh.keyboard.suggest = function(word){

  if(goosh.keyboard.suggpos > goosh.keyboard.suggestions[word].length) goosh.keyboard.suggpos =1;

  if(goosh.keyboard.suggestions[word][goosh.keyboard.suggpos]) 
    goosh.gui.inputfield.value = goosh.keyboard.suggestions[word][goosh.keyboard.suggpos];

  var d= goosh.gui.inputfield; 
  if(d.createTextRange){
    var t=d.createTextRange();
    t.moveStart("character",word.length);
    t.select()
  } else if (d.setSelectionRange){
    d.setSelectionRange(word.length,d.value.length)
  }

}


// evil hack for suggest 
goosh.keyboard.dummyac = function() {

  this.Suggest_apply = function(el,text,sug,temp){

    goosh.keyboard.suggestions[text] = sug;
    goosh.keyboard.suggest(text);
    return true;
  }

};

window.googlesug = new Array();

window.googlesug.ac = new goosh.keyboard.dummyac();


goosh.keyboard.keyDownHandler = function(event){
  if(!event&&window.event) {
    event=window.event;
  }
  if(event) {
    _lastKeyCode=event.keyCode;
  }

  // We are backspacing here...
  if(event&&event.keyCode==9){
    event.cancelBubble=true;
    event.returnValue=false;
    // tab = 9, backsp = 8, ctrl =17, r = 82
    //output.innerHTML += event.keyCode+"<br/>";

    var word = goosh.keyboard.suggword;

    if(word !=""){
      if(!goosh.keyboard.suggestions[word]){
        goosh.keyboard.suggpos = 1;
//	output.innerHTML += "query<br/>";
	var script = document.createElement('script');
	document.body.appendChild(script);
	script.src = "http://www.google.com/complete/search?hl="+goosh.config.lang+"&js=true&qu="+encodeURIComponent(word);
      }
      else{
        goosh.keyboard.suggpos  +=2;
	goosh.keyboard.suggest(word);
      }
    }
    return false
  }
}



goosh.keyboard.mcursor = function(e){
  var keycode=e.keyCode;


  if(goosh.keyboard.hist.length>0){
    if(keycode==38 || keycode==40){

      if(goosh.keyboard.hist[goosh.keyboard.histpos]) {
	goosh.keyboard.hist[goosh.keyboard.histpos] = goosh.gui.inputfield.value;
      }
      else
	goosh.keyboard.histtemp = goosh.gui.inputfield.value;
    }

    if(keycode==38){ // up
      goosh.keyboard.histpos--;
      if(goosh.keyboard.histpos<0) goosh.keyboard.histpos =0;

    }
    else if(keycode==40){ //down

      goosh.keyboard.histpos++;
      if(goosh.keyboard.histpos > goosh.keyboard.hist.length) 
        goosh.keyboard.histpos = goosh.keyboard.hist.length;
    } 

    if(keycode==38 || keycode==40){

      if(goosh.keyboard.hist[goosh.keyboard.histpos]) 
        goosh.gui.inputfield.value = goosh.keyboard.hist[goosh.keyboard.histpos];
      else 
        goosh.gui.inputfield.value = goosh.keyboard.histtemp;

    }

  }

  if(keycode!=9 && keycode !=13) 
   goosh.keyboard.suggword = goosh.gui.inputfield.value;

  if(keycode==13){
    goosh.command();
  }
}


goosh.lib.namespace("goosh.modules");
goosh.lib.namespace("goosh.module");
goosh.lib.namespace("goosh.modobj");

//function yield(){
//  if(cmdqueue.length >0)  command(cmdqueue.pop());
//}


goosh.modules.list = new Array();


goosh.module.base = function(){

  this.mode = false;
//  this.more = false;
  this.parameters = "";
  this.help = "no helptext yet.";
  this.helptext = "";
  this.hasmore = false;
  this.results = new Array();

}

goosh.modules.register = function(name,base){
 if(!base) base = "base"; 
  eval(//"search_"+name+".prototype = new search_"+base+"();"+
       //"searchers_"+name+" = new search_"+name+"();"+
       'goosh.module.'+name+'.prototype = new goosh.module.'+base+';'+
       'goosh.modobj.'+name+' = new goosh.module.'+name+';'+
       'goosh.modules.list["'+name+'"] = goosh.modobj.'+name+";");
}

// goosh web search module

goosh.module.web = function(){
  this.name = "web";
  this.aliases = new Array("web","search","s","w");
  this.mode = true;
  this.start = 0;
  this.args ="";

  this.help = "google web search";
  this.parameters = "[keywords]";
  this.helptext = "<span class='info'>examples:</span><br/>"+
    "<i>web foo bar</i>  - searches the web for &quot;foo bar&quot;<br/>";

  // perform the ajax query
  this.query = function(cmdstr,query) {
//    goosh.ajax.query("//ajax.googleapis.com/ajax/services/search/"+cmdstr+"?v=1.0&start="+this.qstart+"&hl="+goosh.config.lang+"&callback=goosh.modobj."+this.name+".render&q="+encodeURIComponent(query)+'&key='+goosh.config.apikey+"&rsz=large");

    var customSearchOptions = {};
customSearchOptions[google.search.Search.RESTRICT_EXTENDED_ARGS] = {
  'lr': 'lang_'+goosh.config.lang
//  'gl': 'date'
};
    cs = new google.search.CustomSearchControl('004431332481073456201:1y01bmxbens', customSearchOptions);
//    cs.enableAds('pub-6992080843066528');

    cs.setResultSetSize(goosh.config.results);
    google.search.Csedr.addOverride("mysite_");

    cs.setSearchStartingCallback(this, function(control, searcher, query)
    {
//      searcher.setQueryAddition('inurl:' + url);
      searcher.setNoHtmlGeneration();
      goosh.gui.hideinput();
      searching = true;
    });

    cs.setSearchCompleteCallback(this, function(control, searcher, query)
    {
      searching = false; 
      this.hasmore = true;
      goosh.gui.showinput();
      goosh.gui.focusinput();
      goosh.gui.scroll();
 
    });


    var drawOptions = new google.search.DrawOptions();
    drawOptions.enableSearchResultsOnly();

    var div = goosh.gui.out();

    cs.draw(div,drawOptions);

    window.i = ((goosh.config.numres-1) * this.start);
    cs.execute(query,this.start+1);

  }


  // render html output
  this.renderResult = function(context, results, status, details, unused){
    var out = "";
    var rnum = this.start;

    out += "<table border='0'>";

    for (i = this.start; i < (this.start + parseInt(goosh.config.numres)); i++) 
      if(this.results[i])
      {
	var r = this.results[i];

	rnum++;
	goosh.config.urls[rnum] = r.unescapedUrl;
	r.unescapedUrl = r.unescapedUrl.replace(/"/g,"&quot;");
	var url = r.unescapedUrl;

	if(goosh.config.reflink == "on"){
	  if(url.match(/\/\/(www.)?amazon.com\//)){
		  if(url.indexOf("?")>-1) url += "&";
		  else url += "?";
		  url += "tag=gc0a18-20";
		}	
	  if(url.match(/\/\/(www.)?amazon.(de|at|es|co.uk)\//)){
  		  if(url.indexOf("?")>-1) url += "&";
		  else url += "?";
	           url += "tag=gc06-21";
	}	

	goosh.config.urls[rnum] = url;
	}

	out += "<tr>";
	out += "<td valign='top' class='less'>&nbsp;&nbsp;"+rnum+")&nbsp;</td>";
	out += "<td>";
	out += '<a href="'+url+'" target="_blank">'+r.title+"</a>";
	out += "<br/>";
	out += r.content;
	out += "<br/>";
	out += '<a href="'+url+'" target="_blank" class="info" style="text-decoration:none;">'+r.unescapedUrl+"</a>";
	out += "<br/>";
	//if(r.thumb) out += '<a href="'+r.unescapedUrl+'" target="_blank">'+r.thumb+"</a><br/>";
	out += "&nbsp;</td></tr>";
      }

    out += "</table>";

    goosh.gui.out(out);
  }


  // perform search 
  this.call = function(args){
    if(args.length > 0){
      this.start = 0;
      this.qstart = 0;
      this.results = new Array();
      this.args = args.join(" ");
      if(args.length>1 && this.name=="site") {
	//this.name = "web";
	this.args = "site:"+this.args;
	this.cmd = "web";
      }
      else if( this.name=="wiki") {
	//this.name = "web";
	this.args = "site:"+goosh.config.lang+".wikipedia.org "+this.args;
	this.cmd = "web";
      }
      else if( this.name=="amazon") {
	//this.name = "web";
	var am = "amazon.com";
	if(goosh.config.lang == "de") am = "amazon.de";  

	this.args = "site:"+am+" "+this.args;
	this.cmd = "web";
      }
 
      else this.cmd = this.name;

      this.query(this.cmd,this.args);
    }
  }


  // get more results
  this.more = function(){
    if(this.args){
//      this.start += parseInt(goosh.config.numres);
      this.start++;
      this.qstart = this.results.length;
      
      if(this.results.length < this.start + parseInt(goosh.config.numres))
	this.query(this.cmd,this.args);
      else
	this.renderResult();

    }
  }


  // persoen search and get output
  this.render = function(context, results, status, details, unused){
    if(goosh.ajax.iscontext(context)){
      if(results && results.results){

	for(i=0;i<results.results.length;i++) {
	  var r = results.results[i];

	  if(this.name =="blogs") 
	    results.results[i].unescapedUrl = r.postUrl;
	  else if(this.name =="images")
	    results.results[i].thumb = "<img src='"+r.tbUrl+"'  width='"+r.tbWidth+"' height='"+r.tbHeight+"'/>";
	  else if(this.name =="video"){
	    results.results[i].thumb = "<img src='"+r.tbUrl+"' width='130' height='97' />";;
	    results.results[i].unescapedUrl = r.playUrl;

	  }

	  this.results.push(results.results[i]);
	}

	this.hasmore = true;

	if(results.results.length < 8){
	  this.hasmore = false;
	  moreobj = false;
	}
      }
      else{
	this.hasmore = false;
	moreobj = false;
      }

      if(this.hasmore && this.results.length < this.start + parseInt(goosh.config.numres)){
	this.qstart = this.results.length;
	this.query(this.cmd,this.args);
	return
      }

      if(results && results.cursor && results.cursor["moreResultsUrl"])
	this.moreresurl = results.cursor["moreResultsUrl"];

      if(!this.hasmore && this.moreresurl){
	r = new Object();

	r.title = "More results at google";
	r.unescapedUrl = unescape(this.moreresurl);
	r.content = "";
	this.results.push(r);

      }

      this.renderResult(context, results, status, details, unused);


      goosh.gui.showinput();
      goosh.gui.focusinput();
      goosh.gui.scroll();
    }
  }

}
goosh.modules.register("web");



goosh.module.addengine = function(){
  this.name = "addengine";
  this.aliases = new Array("addengine");
  this.help = "add goosh to firefox search box";

  this.call = function(args){
     engineURL ="http://gshell.grothkopp.com/goosh.xml";
      if (!document.all && window.external && ("AddSearchProvider" in window.external)) {
	window.external.AddSearchProvider(engineURL);
      } else { 	 
        goosh.gui.error("addengine will only work in Firefox-Browsers.");
      } 	 
    } 


}
goosh.modules.register("addengine");


goosh.module.amazon = function(){
  this.name = "amazon";
  this.aliases = new Array("amazon","am");
  this.mode = true;
  this.help = "amazon search";
  this.helptext = "<span class='info'>examples:</span><br/>"+
  		  "<i>amazon foo bar</i>  - searches &quot;foo bar&quot; on amazon<br/>";


}
goosh.modules.register("amazon","web");



goosh.module.blogs = function(){
  this.name = "blogs";
  this.aliases = new Array("blogs","blog","b");
  this.mode = true;

  this.parameters = "[keywords]";
  this.help = "google blog search";
  this.helptext = "<span class='info'>examples:</span><br/>"+
  		  "<i>blog foo bar</i>  - searches for &quot;foo bar&quot; blogs<br/>";

}

goosh.modules.register("blogs","web");



goosh.module.calculate = function(){
  this.name = "calculate";
  this.aliases = new Array("calculate","calc");

  this.help = "evaluate a mathematical expression";
  this.parameters = "[mathematical expression]";

  this.call = function(args){

    var out ="";

    var exp = args.join(" ");
    var expin = exp;

    if(exp.match(/^[0-9\+\-\/\*\. \^\(\)]+$/)){
   
    exp = exp.replace(/([0-9]+)\^([0-9]+)/g, "Math.pow($1,$2)");

    goosh.gui.outln(expin+" = "+eval(exp));
    }
    else{
    goosh.gui.error("could not calculate that.");
    return false;
    }

  }

}
goosh.modules.register("calculate");



goosh.module.cd = function(){
  this.name = "cd";
  this.aliases = new Array("cd");
  this.parameters = "&lt;command>";
  this.help = "change mode";
  this.helptext = "This exists just for convenience. Use &lt;command> without parameters instead.<br/>";

  this.call = function(args){
    if(!args[0]) args[0] = goosh.config.mode;
    if(args[0] && args[0] =="..") args[0] = "web";

    if(args[0] && goosh.modules.list[args[0]] && goosh.modules.list[args[0]].mode){ 
      var searcher = goosh.modules.list[args[0]];

      goosh.config.mode = searcher.name;
      goosh.gui.updateprompt();

    }
    else{
      goosh.gui.error("command not found or command is not a mode.");
    }
  }


}
goosh.modules.register("cd");



goosh.module.clear = function(){
  this.name = "clear";
  this.aliases = new Array("clear","c");
  this.help = "clear the screen";

  this.call = function(args){
  	goosh.gui.clear();
  }


}
goosh.modules.register("clear");



goosh.module.feeds = function(){
  this.name = "feeds";
  this.aliases = new Array("feeds","feed","f");
  this.mode = true;
  this.start = 0;
  this.args ="";

  this.parameters = "[keywords]";
  this.help = "google feed search";
  this.helptext = "<span class='info'>examples:</span><br/>"+
  		  "<i>feed foo bar</i>  - searches for &quot;foo bar&quot; feeds<br/>"+
  		  "<i>read 2</i>  - reads second result<br/>";

  this.query = function(cmdstr,query) {

    //output.innerHTML += "COMMAND:"+cmdstr+"/"+query+"/"+this.name+".<br/>"; // debug


    goosh.ajax.query("//ajax.googleapis.com/ajax/services/feed/find?v=1.0&hl="+goosh.config.lang+"&callback=goosh.modobj."+this.name+".render&q="+encodeURIComponent(query)+'&num=100&key'+goosh.config.apikey+"&");
  }



  this.call = function(args){
   if(args.length > 0)
     this.start = 0;
     this.results = new Array();
     this.args = args.join(" ");
     this.query(this.name,args.join(" "));
  }


  this.render = function(context, results, status, details, unused){
    if(goosh.ajax.iscontext(context)){

      if(results && results.entries && results.entries.length>0){
	results.results = new Array();

	for(i=0;i<results.entries.length;i++)
	  if(results.entries[i])
	    results.results[i] = results.entries[i];

	for(i=0;i<results.results.length;i++)
	  if(results.results[i])
	  {
	    var r = results.results[i];
	    results.results[i].unescapedUrl = r.url;
	    results.results[i].content = r.contentSnippet;
	  }

	this.results = results.results;
	this.hasmore = true;

	this.renderResult(context, results, status, details, unused);
      }
      else {
	goosh.gui.error("No feeds found for &quot;"+this.args+"&quot;");
      }

      goosh.gui.showinput();
      goosh.gui.focusinput();
      goosh.gui.scroll();

    }
  }

  this.more = function(){

    if(this.args){
      this.start += parseInt(goosh.config.numres);

      if(this.results.length <= this.start+ parseInt(goosh.config.numres)){
	this.hasmore = false;
	moreobj = false;

      }

      this.renderResult();

    }


  }
}
goosh.modules.register("feeds","web");



goosh.module.go = function(){
  this.name = "go";
  this.aliases = new Array("go","g");
  this.parameters = "&lt;url>";
  this.help = "open url";

  this.call = function(args){
    if(args[0]){
     var url = args[0];

//	window.name = encodeURI(output.innerHTML);

     if(url.indexOf("http://")==-1 && url.indexOf("https://")) url = "http://"+url;
     window.location.href = url;
    }
  }


}
goosh.modules.register("go");



goosh.module.help = function(){
  this.name = "help";
  this.aliases = new Array("help","man","h","?");

  this.help = "displays help text";
  this.helptext = "";
  this.parameters = "[command]";

  this.call = function(args){

    if(args[0] == "goosh") args[0] = false;

    var out = "<span class='info'>help";
    if(args[0]) out +=": "+args[0];
    out += "</span><br/> <br/>";

    if(args[0] && !goosh.modules.list[args[0]]) {
     goosh.gui.error("command &quot;"+args[0]+"&quot; not found.");
    return false;
    }

    out += "<table border='0' class='help'>";
    out += "<tr><td class='less'>command</td><td class='less'>aliases</td><td class='less'>parameters</td><td class='less'>function</td></tr>";

    var module;

    for(key in goosh.modules.list){
       if(!args[0] || key == args[0]){
	module = goosh.modules.list[key];

	out += "<tr><td";
         if(module.mode) out += " class='info'";
	 out += ">";
	out += ""+module.name + "</td><td>";
	if(module.aliases.length >1){
	out += "(";
	for(i=0;i<module.aliases.length;i++){
	  if(module.aliases[i] != module.name){
	  out += module.aliases[i];
	  out += ",";
	  }
	}

	out = out.substr(0,out.length-1);
	out += ")";
	}
	out += "</td><td>";
	if( module.parameters) out +=  module.parameters;
	out += "</td><td>";
	out += ""+ module.help +"\n";
	out += "</td></tr>";

      }
    }

    out += "</table>";

       if(args[0]){
     out += " <br/>";
     out += module.helptext;
     out += " <br/>";
    }
    else{
     out += " <br/>";
     out += "- Enter green commands without parameters to change default mode.<br/>";
    out += "- Anything that's not a command will search in current default mode.<br/>";
    out += "- Aliases will expand to commands. Numbers will expand to corresponding search results.<br/>";
    out += "- Use cursor up and down for command history.<br/>";
    out += "- Enter keyword and hit the tab-key for tab-completion.<br/>";
    out += "- Commands marked with * are experimental, use them with care and please report any bugs.<br/>";
    out += "<br/>";


    
    }

	goosh.gui.outln(out);
  }

}
goosh.modules.register("help");


goosh.module.site = function(){
  this.name = "site";
  this.aliases = new Array("site","in");
  this.parameters = "&lt;url> &lt;keywords>";
  this.help = "search in a specific website";
  this.mode = false;


}
goosh.modules.register("site","web");



goosh.module.load = function(){
  this.name = "load";
  this.aliases = new Array("load");
  this.help = "load an extension";
  this.parameters = "&lt;extension_url>";

  this.call = function(args){
    if(args[0]){
      var url = args[0];
      if(url.indexOf("http://")==-1 && url.indexOf("https://")) url = "http://gshell.grothkopp.com/ext/"+url+".js";
      var script = document.createElement('script');
      document.body.appendChild(script);
      script.src = url;

    }

  }


}
goosh.modules.register("load");



goosh.module.ls = function(){
  this.name = "ls";
  this.aliases = new Array("ls");

  this.help = "lists commands";
  this.helptext = "this exists just for convenience. Use <span class='info'>help</span> for help.<br/>";
  this.parameters = "[command]";

  this.call = function(args){

    var out ="";

    if(args[0] && !goosh.modules.list[args[0]]) {
    goosh.gui.error("command &quot;"+args[0]+"&quot; not found.");
    return false;
    }

    out += "<table border='0' class='help'><tr>";

    var module;
    var i =0;

    for(key in goosh.modules.list){
       if(args.length ==0 || key == args[0]){
	module = goosh.modules.list[key];

	out += "<td";
	if(module.mode) out += " class='info'";
	out += ">"+module.name + "</td><td>";
        if(i==5){ i=0; out += '</tr><tr>';}
	i++;
      }
    }

    out += "</tr></table>";


    goosh.gui.outln(out);
  }

}
goosh.modules.register("ls");



goosh.module.lucky = function(){
  this.name = "lucky";
  this.aliases = new Array("lucky","l");
  this.mode = false;

  this.parameters = "[keywords]";
  this.help = "go directly to first result";
  this.helptext = "<span class='info'>examples:</span><br/>"+
  		  "<i>lucky foo bar</i>  - goes to first &quot;foo bar&quot; result<br/>";

  this.call = function(args){
  this.qstart = 0;
   if(args.length > 0)
     this.query("web",args.join(" "));
  }

  this.render = function(context, results, status, details, unused){

    if(goosh.ajax.iscontext(context)){
      this.renderResult(context);

      if(results.results[0].unescapedUrl){
	setTimeout('window.location.href = "'+results.results[0].unescapedUrl+'"',0);
      }
      goosh.gui.showinput();
      goosh.gui.focusinput();
      goosh.gui.scroll();

    }
  }

}
goosh.modules.register("lucky","web");


goosh.module.more = function(){
  this.name = "more";
  this.aliases = new Array("more","m");
  this.help = "get more results";

  this.call = function(args){
    if(goosh.config.moreobj && goosh.config.moreobj.hasmore){
     goosh.config.moreobj.more();
    }
  }


}
goosh.modules.register("more");



goosh.module.news = function(){
  this.name = "news";
  this.aliases = new Array("news","n");
  this.mode = true;

  this.parameters = "[keywords]";
  this.help = "google news search";
  this.helptext = "<span class='info'>examples:</span><br/>"+
  		  "<i>blog foo bar</i>  - searches for &quot;foo bar&quot; news<br/>";


}
goosh.modules.register("news","web");



goosh.module.open = function(){
  this.name = "open";
  this.aliases = new Array("open","o");
  this.parameters = "&lt;url>";
  this.help = "open url in new window";
  this.helptext = "<span class='info'>examples:</span><br/>"+
  		  "<i>open 1 3</i>  - open first and third result from last search<br/>";


  this.call = function(args){
    for(i=0;i<args.length;i++){
     var url = args[i];
     if(url.indexOf("http://")==-1 && url.indexOf("https://")) url = "http://"+url;
     window.open(url,'_blank','');
    }
  }


}
goosh.modules.register("open");



goosh.module.read = function(){
  this.name = "read";
  this.aliases = new Array("read","rss","r");
  this.mode = false;
  this.start = 0;

  this.parameters = "&lt;url>";
  this.help = "read feed of url";
  this.helptext = "<span class='info'>examples:</span><br/>"+
  		  "<i>read reddit.com</i>  - read reddit.com-feed<br/>";

  this.query = function(cmdstr,query) {

//    output.innerHTML += "COMMAND:"+cmdstr+"/"+query+"/"+this.name+".<br/>"; // debug

    goosh.ajax.query("//ajax.googleapis.com/ajax/services/feed/load?v=1.0&hl="+goosh.config.lang+"&callback=goosh.modobj."+this.name+".render&num=100&scoring=h&q="+encodeURIComponent(query)+"&key="+goosh.config.apikey);
  }

  this.lookup = function(cmdstr,query) {

  //  output.innerHTML += "lookup:"+cmdstr+"/"+query+"/"+this.name+".<br/>"; // debug


    goosh.ajax.query("//ajax.googleapis.com/ajax/services/feed/lookup?v=1.0&hl="+goosh.config.lang+"&callback=goosh.modobj."+this.name+".lookupdone&q="+encodeURIComponent(query)+"&key="+goosh.config.apikey);
  }


  this.lookupdone = function(context, results, status, details, unused){
   if(results){
     if(results.url){
       if(goosh.ajax.iscontext(context))
       	this.query(this.name,results.url);
       }
     }
     else {
      goosh.gui.error("feed &quot;"+this.args+"&quot; not found.<br/> Try the &quot;feed&quot;-command to find feeds.");
     }
  }

  this.call = function(args){
   if(args.length > 0){
     this.start =0;
     this.results = new Array();
     this.args = args.join(" ");
     this.lookup(this.name,args.join(" "));
     
     }
  }



  this.render = function(context, results, status, details, unused){
    if(goosh.ajax.iscontext(context)){

      if(results){
	results.results = new Array();

	for(i=0;i<results.feed.entries.length;i++)
	  if(results.feed.entries[i])
	    results.results[i] = results.feed.entries[i];

	for(i=0;i<results.results.length;i++)
	  if(results.results[i])
	  {
	    var r = results.results[i];
	    results.results[i].unescapedUrl = r.link;
	    results.results[i].content = r.contentSnippet;
	  }

	this.results = results.results; 
	this.hasmore = true;

	this.renderResult(context, results, status, details, unused);


	goosh.gui.showinput();
	goosh.gui.focusinput();
	goosh.gui.scroll();

      }
      else{
	goosh.gui.error("Error: feed &quot;"+this.args+"&quot; not found.<br/> Try the &quot;feed&quot;-command to find feeds.");
      }
    }
  }

  this.more = function(){

    if(this.args){
      this.start += parseInt(goosh.config.numres);

      if(this.results.length <= this.start + parseInt(goosh.config.numres)){
	this.hasmore = false;
	moreobj = false;

      }



      this.renderResult();

    }


  }

}
goosh.modules.register("read","web");



goosh.module.settings = function(){
  this.name = "settings";
  this.aliases = new Array("settings","set");

  this.help = "edit settings";
  this.parameters = "[name] [value]";

  this.helptext =  "<span class='info'>examples:</span><br/>"+
      "<i>set lang de</i>  - sets language to german<br/>"+
      "<i>set lang</i>  - displays value of lang-setting<br/>"+
      "<i>settings</i>  - displays all settings<br/>"+
      "<i>settings reset</i>  - reset all settings to default values<br/>";


  this.call = function(args){

    var out ="";

    if(args[0] && args[1]){
      if(goosh.set.list[args[0]] && goosh.set.list[args[0]].set(args[1])){
        
	if(goosh.set.list[args[0]].get() == goosh.set.list[args[0]].def) 
	 goosh.lib.cookie.del(args[0]);
	else
	 goosh.lib.cookie.set(args[0],goosh.set.list[args[0]].get(),365);

	args[1] =false;
      }
      else {
	goosh.gui.error("Could not set "+args[0]+" to &quot;"+args[1]+"&quot;");
	return false;
      }
    }

    if(args[0] && !args[1]) {
      if(args[0] == "reset"){
	for(key in goosh.set.list){
	 goosh.set.list[key].set(goosh.set.list[key].def);
	 goosh.lib.cookie.del(key);
	}
	out += "Settings where set to default values.";
      }
      else if(goosh.set.list[args[0]]){
	out += args[0]+" is set to &quot;"+goosh.set.list[args[0]].get()+"&quot;.<br>";
      }
      else
	goosh.gui.error("No setting with that name.");
    }
    else{
      out += "<table border='0' class='help'><tr>";
      out += "<tr><td class='less'>name</td><td class='less'>value</td><td class='less'>default</td><td class='less'>help</td></tr>"

	for(key in goosh.set.list){
	  out += "<td";
	  out += " class='info'";
	  out += ">"+ key + "</td>";
	  out += "<td>"+goosh.set.list[key].get()+"</td>"
	  out += "<td class='less'>"+goosh.set.list[key].def+"</td>"
	    out += "<td class='less'>"+goosh.set.list[key].txt+"</td>"
	    out += '</tr><tr>';
	}

      out += "</tr></table>";

    }
    goosh.gui.outln(out);
    //alert(document.cookie);
  }

}
goosh.modules.register("settings");



goosh.module.sponsors = function(){
  this.name = "sponsors";
  this.aliases = new Array("sponsors");

  this.help = "A list of people who have supported goosh";
  this.parameters = "";

  this.call = function(args){

    goosh.gui.outln("A list of people who have supported goosh:");
    goosh.gui.outln("");
    goosh.gui.outln("1. Levonn");
    goosh.gui.outln('2. <a href="https://www.patreon.com/goosh?ty=h" target="_blank">Your name here? Support goosh (and me) on patreon!</a>');
    goosh.gui.outln("");


  }

}
goosh.modules.register("sponsors");


goosh.module.wiki = function(){
  this.name = "wiki";
  this.aliases = new Array("wikipedia","wiki");
  this.mode = true;
  this.help = "wikipedia search";
  this.helptext = "<span class='info'>examples:</span><br/>"+
  		  "<i>wiki foo bar</i>  - searches &quot;foo bar&quot; in wikipedia<br/>";


}
goosh.modules.register("wiki","web");









goosh.command = function(){
var cmdpar = goosh.gui.inputfield.value;

var tokens = cmdpar.split(" ");
var args = new Array();


  for(i=0; i<tokens.length; i++){
    if(tokens[i] != ""){

      if(tokens[0] != "set" && tokens[0] != "settings"){
      var j =1;
      while(goosh.config.urls[j]){  // replace search result numbers
	if(tokens[i] == j) {
	  tokens[i] = goosh.config.urls[j];
	  if(i == 0) args.push("open"); // number shortcut
	}
	j++;
      }
      }

      args.push(tokens[i]);
    } 
  }




  var searcher;

  for(key in goosh.modules.list){
     if(goosh.lib.in_array(goosh.modules.list[key].aliases, args[0])){
      searcher = goosh.modules.list[key];
      args[0] = searcher.name;
      break;
     }
  }

if(args.length == 0 && goosh.config.moreobj && goosh.config.moreobj.hasmore){
  searcher = goosh.modules.list["more"];
  args[0] = "more";
}

// output.innerHTML += searcher.aliases;  
  //   output.innerHTML += "COMMAND:"+delim+"/"+cmdstr+"/"+args+".<br/>"; // debug

  var cmdstrnew = args.join(" ");

  if(encodeURIComponent(cmdstrnew) != goosh.lib.get("q") && cmdstrnew != "more" && cmdstrnew != "logout")
   window.location.hash = "#"+encodeURIComponent(cmdstrnew);

  goosh.gui.out("<div class='input'><span class='less'>"+goosh.gui.prompt+"</span>"+cmdstrnew.replace(/</g, "&lt;")+"</div>");
  if(cmdstrnew != "") {
    goosh.keyboard.hist[goosh.keyboard.hist.length] = cmdstrnew;
    goosh.keyboard.histpos = goosh.keyboard.hist.length;
  }
  
  
  var cmd = ""; 

  if(!searcher) {
     searcher = goosh.modules.list[goosh.config.mode]; // default searcher = mode
  }
  else {
    for(i=0; i<args.length-1; i++) args[i] = args[i+1];
    args.pop();
  }

  //more
  if(searcher.more && args.length>0) this.config.moreobj = searcher;

  if(args.length == 0 && searcher.mode) {
      goosh.config.mode = searcher.name;
      goosh.gui.updateprompt();
    }
    else{
      searcher.call(args);
}

  goosh.gui.scroll();
  goosh.gui.inputfield.value = '';

  goosh.gui.focusinput();

return false;
}



goosh.onload = function(e,username) {

  var ifrlogin =false;

  try{
    if(parent.goosh != goosh) { 
      var bodyel = document.getElementById('body');
      bodyel.innerHTML = ""; 
      goosh=parent.goosh;
      ifrlogin = true;
    }
  }
  catch(e){}


  goosh.gui.init();

  if(!username && (ifrlogin || document.cookie.indexOf("loggedin") != -1)){
   goosh.ajax.query("http://goosh.appspot.com/status?callback=goosh.onload");
   return;
   }
  else {
   if(goosh.ajax.iscontext(e)) {
   goosh.config.user = username;
    //try {
     var d = goosh.gui.el("gooshlogin");
     var p = goosh.gui.el("gooshloginparent");
     if(d && p) { goosh.gui.outputel.removeChild(goosh.gui.outputel.lastChild);}
    // }
    // catch(e){}
   }
  }

  if(username && username != "guest") goosh.lib.cookie.set("loggedin","1",365);


  goosh.set.init();




}

goosh.getquery = function(){
   var query = ""
   if(goosh.lib.get("q")) {query = goosh.lib.get("q");} //{window.location.href="http://gshell.grothkopp.com/#"+goosh.lib.get("q"); return;} //query = decodeURI(goosh.lib.get("q"));
   if(window.location.hash) query = decodeURIComponent(window.location.hash.substr(1));
   query +=" ";

   if(query != " " && query.substr(0,6) != "login " && query.substr(0,4) != "set " && query.substr(0,9) != "settings ") 
     goosh.gui.inputfield.value = query.substr(0,query.length); //.replace(/</g, "&lt;"); 
   else 
     goosh.gui.inputfield.value = "";
  //if(window.location.hash && window.location.hash.substr(1,5) != "login") goosh.gui.inputfield.value = window.location.hash.substr(1).replace(/</g, "&lt;");
  goosh.gui.updateprompt();
  goosh.gui.showinput();
  goosh.gui.focusinput();
 
  if(goosh.gui.inputfield.value != "") {
 
  goosh.command();
  
  }
}


if(typeof window.addEventListener !== 'undefined') {
  window.addEventListener('load', goosh.onload, false);
} else if(typeof window.attachEvent !== 'undefined') {
  window.attachEvent('onload', goosh.onload);
	          }


google.load('search', '1', {language : goosh.config.lang, nocss: "true"}); //de
google.setOnLoadCallback(function(){ loaded = true; },true);


